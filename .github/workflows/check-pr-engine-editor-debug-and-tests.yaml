name: Check PR - Engine Editor Debug And Tests
on: [pull_request]

env:
  SCONS_CACHE_MSVC_CONFIG: true
  GODOT_BASE_VERSION: 3.5.1
  GODOT_BASE_BRANCH: 3.5.1

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-check-pr-engine-editor-debug-and-tests
  cancel-in-progress: true

jobs:
  build-godot-bootstrap:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        include:
          - os: ubuntu-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.5.1-stable
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: modules/kotlin_jvm/kt/
          build-root-directory: modules/kotlin_jvm/kt/
          arguments: godot-library:build
      - name: Upload godot-bootstrap jar
        uses: actions/upload-artifact@v3
        with:
          name: godot-bootstrap
          path: modules/kotlin_jvm/kt/godot-library/build/libs/godot-bootstrap.jar
  build-editor-debug:
    strategy:
      matrix:
        name: [ Linux, OSX-x64, OSX-arm64, Windows ]
        include:
          # always use the oldest still supported LTS version of github actions. See: https://github.com/utopia-rise/godot-kotlin-jvm/issues/224
          - name: Linux
            os: ubuntu-20.04
            platform: x11
            arch: 64
          - name: OSX-x64
            os: macos-latest
            platform: osx
            arch: 64
          - name: OSX-arm64
            os: macos-latest
            platform: osx
            arch: arm64
          - name: Windows
            os: windows-latest
            platform: windows
            arch: 64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.5.1-stable
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive
      - name: Linux dependencies
        if: matrix.platform == 'x11'
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb wget unzip
      - name: Setup Godot dependencies
        uses: ./.github/actions/godot-deps
      # Upload cache on completion and check it out now
      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ github.job }}-${{ matrix.platform }}-${{ matrix.arch }}
      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1
      - name: Build with editor debug
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=${{ matrix.arch }} -j${{ steps.cpu-cores.outputs.count }}
          platform: ${{ matrix.platform }}
          target: debug
          tools: true
      - name: Upload OSX binary
        if: matrix.platform == 'osx'
        uses: actions/upload-artifact@v3
        with:
          name: osx-editor-debug-app-${{ matrix.arch }}
          path: bin/godot.osx.tools.${{ matrix.arch }}
      - name: Upload linux binary
        if: matrix.platform == 'x11'
        uses: actions/upload-artifact@v3
        with:
          name: linux-editor-debug-${{ matrix.arch }}
          path: bin/godot.x11.tools.${{ matrix.arch }}
  create-macos-universal:
    needs: [build-editor-debug]
    strategy:
      matrix:
        os: [ macos-latest ]
        include:
          - os: macos-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Create OSX universal binary
        uses: ./.github/actions/create-osx-universal-binary
        with:
          amd-64-binary-artifact: osx-editor-debug-app-64
          amd-64-binary-name: godot.osx.tools.64
          arm-64-binary-artifact: osx-editor-debug-app-arm64
          arm-64-binary-name: godot.osx.tools.arm64
          universal-output-binary-name: godot.osx.tools.universal
      - name: Upload OSX universal binary
        uses: actions/upload-artifact@v3
        with:
          name: osx-editor-debug-app
          path: godot.osx.tools.universal
  test-editor-debug:
    needs: [create-macos-universal, build-godot-bootstrap]
    strategy:
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            java-version: 11
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.5.1-stable
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Build tests project
        uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: modules/kotlin_jvm/harness/tests/
          build-root-directory: modules/kotlin_jvm/harness/tests/
          arguments: build
      - name: Download OSX Editor Debug App
        uses: actions/download-artifact@v1
        with:
          name: osx-editor-debug-app
      - name: Download godot-bootstrap
        uses: actions/download-artifact@v1
        with:
          name: godot-bootstrap
      - name: Run Tests
        run: |
          cp godot-bootstrap/godot-bootstrap.jar osx-editor-debug-app/
          cd modules/kotlin_jvm/harness/tests/
          chmod +x run_godot_kotlin_tests.sh
          chmod +x ../../../../osx-editor-debug-app/godot.osx.tools.universal
          jlink --add-modules java.base,java.logging --output jre
          ./run_godot_kotlin_tests.sh ../../../../osx-editor-debug-app/godot.osx.tools.universal

  test-android-debug:
    needs: [build-editor-debug, build-godot-bootstrap]
    strategy:
      matrix:
        name: [ host-linux-api-level-33 ]
        include:
          - name: host-linux-api-level-33
            os: ubuntu-latest
            java-version: 11
            arch: 64
            api-level: 33
    runs-on: ${{ matrix.os }}
    steps:
      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: 3.5.1-stable

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Linux dependencies
        if: matrix.platform == 'x11'
        shell: bash
        run: |
          # Azure repositories are not reliable, we need to prevent azure giving us packages.
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb wget unzip

      - name: Setup Godot dependencies
        uses: ./.github/actions/godot-deps

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install android tools for api level ${{ matrix.api-level }}
        run: |
          sdkmanager "platform-tools" "platforms;android-${{ matrix.api-level }}" "build-tools;32.0.0" # keep in sync with build.gradle.kts of tests harness project
          yes | sdkmanager --licenses

      - name: Build tests project
        uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: modules/kotlin_jvm/harness/tests/
          build-root-directory: modules/kotlin_jvm/harness/tests/
          arguments: build -PwithAndroid=true

      - name: Download godot-bootstrap
        uses: actions/download-artifact@v1
        with:
          name: godot-bootstrap

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1

      - name: Build headless editor for export
        uses: ./.github/actions/godot-build
        with:
          sconsflags: -j${{ steps.cpu-cores.outputs.count }}
          platform: server
          target: release_debug
          tools: yes

      - name: Build android x86_64 export template release_debug binary
        uses: ./.github/actions/godot-build
        with:
          sconsflags: android_arch=x86_64 -j${{ steps.cpu-cores.outputs.count }}
          platform: android
          target: release_debug
          tools: false

      - name: Build android x86_64 release_debug export template
        shell: bash
        run: |
          cd platform/android/java/ && ./gradlew generateGodotTemplates && cd ../../..

      - name: Prepare for android test execution
        run: |
          cp linux-editor-debug-${{ matrix.arch }}/godot.x11.tools.${{ matrix.arch }} bin/
          cp godot-bootstrap/godot-bootstrap.jar bin/
          cd modules/kotlin_jvm/harness/tests/
          chmod +x run_godot_kotlin_android_tests.sh
          chmod +x ../../../../bin/godot.x11.tools.${{ matrix.arch }}
          jlink --add-modules java.base,java.logging --output jre-amd64
          ../../../../bin/godot.x11.tools.${{ matrix.arch }} --no-window --export-debug "android_tests_ci_cd" tests.apk

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./run_godot_kotlin_android_tests.sh
